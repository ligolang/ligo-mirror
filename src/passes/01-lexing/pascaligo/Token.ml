(* Token specification for PascaLIGO *)

(* Vendor dependencies *)

module Region    = Simple_utils.Region
module Markup    = LexerLib.Markup
module Directive = LexerLib.Directive

(* Utility modules and types *)

module SMap = Map.Make (String)
module Wrap = Lexing_shared.Wrap
module Attr = Lexing_shared.Attr

let sprintf = Printf.sprintf

let wrap = Wrap.wrap

module T =
  struct
    (* A lexeme is the concrete syntax of a token *)

    type lexeme = string

    (* Definition of tokens generated by "menhir --only-tokens"

       It contains [token] and ['a terminal] types. The first one we
       redefine manually here (by type [t]) but the second one we need
       to satisfy Menhir's Inspection API.  *)

    include Menhir_pascaligo_tokens.MenhirToken

    (* TOKENS *)

    type t =
      (* Preprocessing directives *)

      Directive of Directive.t

      (* Literals *)

    | String   of lexeme Wrap.t
    | Verbatim of lexeme Wrap.t
    | Bytes    of (lexeme * Hex.t) Wrap.t
    | Int      of (lexeme * Z.t) Wrap.t
    | Nat      of (lexeme * Z.t) Wrap.t
    | Mutez    of (lexeme * Int64.t) Wrap.t
    | Ident    of lexeme Wrap.t
    | UIdent   of lexeme Wrap.t
    | Lang     of lexeme Region.reg Region.reg
    | Attr     of Attr.t Region.reg

    (* Symbols *)

    | SEMI     of lexeme Wrap.t  (* ;   *)
    | COMMA    of lexeme Wrap.t  (* ,   *)
    | LPAR     of lexeme Wrap.t  (* (   *)
    | RPAR     of lexeme Wrap.t  (* )   *)
    | LBRACE   of lexeme Wrap.t  (* {   *)
    | RBRACE   of lexeme Wrap.t  (* }   *)
    | LBRACKET of lexeme Wrap.t  (* [   *)
    | RBRACKET of lexeme Wrap.t  (* ]   *)
    | SHARP    of lexeme Wrap.t  (* #   *)
    | VBAR     of lexeme Wrap.t  (* |   *)
    | ARROW    of lexeme Wrap.t  (* ->  *)
    | ASS      of lexeme Wrap.t  (* :=  *)
    | EQ       of lexeme Wrap.t  (* =   *)
    | COLON    of lexeme Wrap.t  (* :   *)
    | LT       of lexeme Wrap.t  (* <   *)
    | LE       of lexeme Wrap.t  (* <=  *)
    | GT       of lexeme Wrap.t  (* >   *)
    | GE       of lexeme Wrap.t  (* >=  *)
    | NE       of lexeme Wrap.t  (* =/= *)
    | PLUS     of lexeme Wrap.t  (* +   *)
    | MINUS    of lexeme Wrap.t  (* -   *)
    | SLASH    of lexeme Wrap.t  (* /   *)
    | TIMES    of lexeme Wrap.t  (* *   *)
    | DOT      of lexeme Wrap.t  (* .   *)
    | WILD     of lexeme Wrap.t  (* _   *)
    | CARET    of lexeme Wrap.t  (* ^   *)

    (* Keywords *)

    | And        of lexeme Wrap.t  (* and       *)
    | Begin      of lexeme Wrap.t  (* begin     *)
    | BigMap     of lexeme Wrap.t  (* big_map   *)
    | Block      of lexeme Wrap.t  (* block     *)
    | Case       of lexeme Wrap.t  (* case      *)
    | Const      of lexeme Wrap.t  (* const     *)
    | Contains   of lexeme Wrap.t  (* contains  *)
    | Else       of lexeme Wrap.t  (* else      *)
    | End        of lexeme Wrap.t  (* end       *)
    | For        of lexeme Wrap.t  (* for       *)
    | From       of lexeme Wrap.t  (* from      *)
    | Function   of lexeme Wrap.t  (* function  *)
    | Recursive  of lexeme Wrap.t  (* recursive *)
    | If         of lexeme Wrap.t  (* if        *)
    | In         of lexeme Wrap.t  (* in        *)
    | Is         of lexeme Wrap.t  (* is        *)
    | List       of lexeme Wrap.t  (* list      *)
    | Map        of lexeme Wrap.t  (* map       *)
    | Mod        of lexeme Wrap.t  (* mod       *)
    | Nil        of lexeme Wrap.t  (* nil       *)
    | Not        of lexeme Wrap.t  (* not       *)
    | Of         of lexeme Wrap.t  (* of        *)
    | Or         of lexeme Wrap.t  (* or        *)
    | Patch      of lexeme Wrap.t  (* patch     *)
    | Record     of lexeme Wrap.t  (* record    *)
    | Remove     of lexeme Wrap.t  (* remove    *)
    | Set        of lexeme Wrap.t  (* set       *)
    | Skip       of lexeme Wrap.t  (* skip      *)
    | Step       of lexeme Wrap.t  (* step      *)
    | Then       of lexeme Wrap.t  (* then      *)
    | To         of lexeme Wrap.t  (* to        *)
    | Type       of lexeme Wrap.t  (* type      *)
    | Var        of lexeme Wrap.t  (* var       *)
    | While      of lexeme Wrap.t  (* while     *)
    | With       of lexeme Wrap.t  (* with      *)
    | Module     of lexeme Wrap.t  (* module    *)

    (* End-Of-File *)

    | EOF of lexeme Wrap.t

    type token = t


    (* FROM TOKENS TO LEXEMES *)

    let to_lexeme = function
      (* Directives *)

      Directive d -> Directive.to_lexeme d

      (* Literals *)

    | String t   -> sprintf "%S" t#payload (* Escaped *)
    | Verbatim t -> String.escaped t#payload
    | Bytes t    -> fst t#payload
    | Int t
    | Nat t      -> fst t#payload
    | Mutez t    -> fst t#payload
    | Ident t
    | UIdent t   -> t#payload
    | Attr t     -> Attr.to_lexeme t.Region.value
    | Lang lang  -> "[%" ^ Region.(lang.value.value)

    (* Symbols *)

    | SEMI     t
    | COMMA    t
    | LPAR     t
    | RPAR     t
    | LBRACE   t
    | RBRACE   t
    | LBRACKET t
    | RBRACKET t
    | SHARP    t
    | VBAR     t
    | ARROW    t
    | ASS      t
    | EQ       t
    | COLON    t
    | LT       t
    | LE       t
    | GT       t
    | GE       t
    | NE       t
    | PLUS     t
    | MINUS    t
    | SLASH    t
    | TIMES    t
    | DOT      t
    | WILD     t
    | CARET    t

    (* Keywords *)

    | And       t
    | Begin     t
    | BigMap    t
    | Block     t
    | Case      t
    | Const     t
    | Contains  t
    | Else      t
    | End       t
    | For       t
    | From      t
    | Function  t
    | Recursive t
    | If        t
    | In        t
    | Is        t
    | List      t
    | Map       t
    | Mod       t
    | Nil       t
    | Not       t
    | Of        t
    | Or        t
    | Patch     t
    | Record    t
    | Remove    t
    | Set       t
    | Skip      t
    | Step      t
    | Then      t
    | To        t
    | Type      t
    | Var       t
    | While     t
    | With      t
    | Module    t -> t#payload

    (* End-Of-File *)

    | EOF _ -> ""


    (* KEYWORDS *)

    let mk_And       region = And       (wrap "and"       region)
    let mk_Begin     region = Begin     (wrap "begin"     region)
    let mk_BigMap    region = BigMap    (wrap "big_map"   region)
    let mk_Block     region = Block     (wrap "block"     region)
    let mk_Case      region = Case      (wrap "case"      region)
    let mk_Const     region = Const     (wrap "const"     region)
    let mk_Contains  region = Contains  (wrap "contains"  region)
    let mk_Else      region = Else      (wrap "else"      region)
    let mk_End       region = End       (wrap "end"       region)
    let mk_For       region = For       (wrap "for"       region)
    let mk_From      region = From      (wrap "from"      region)
    let mk_Function  region = Function  (wrap "function"  region)
    let mk_If        region = If        (wrap "if"        region)
    let mk_In        region = In        (wrap "in"        region)
    let mk_Is        region = Is        (wrap "is"        region)
    let mk_List      region = List      (wrap "list"      region)
    let mk_Map       region = Map       (wrap "map"       region)
    let mk_Mod       region = Mod       (wrap "mod"       region)
    let mk_Nil       region = Nil       (wrap "nil"       region)
    let mk_Not       region = Not       (wrap "not"       region)
    let mk_Of        region = Of        (wrap "of"        region)
    let mk_Or        region = Or        (wrap "or"        region)
    let mk_Patch     region = Patch     (wrap "patch"     region)
    let mk_Record    region = Record    (wrap "record"    region)
    let mk_Recursive region = Recursive (wrap "recursive" region)
    let mk_Remove    region = Remove    (wrap "remove"    region)
    let mk_Set       region = Set       (wrap "set"       region)
    let mk_Skip      region = Skip      (wrap "skip"      region)
    let mk_Step      region = Step      (wrap "step"      region)
    let mk_Then      region = Then      (wrap "then"      region)
    let mk_To        region = To        (wrap "to"        region)
    let mk_Type      region = Type      (wrap "type"      region)
    let mk_Var       region = Var       (wrap "var"       region)
    let mk_While     region = While     (wrap "while"     region)
    let mk_With      region = With      (wrap "with"      region)
    let mk_Module    region = Module    (wrap "module"    region)

    let keywords = [
      mk_And;
      mk_Begin;
      mk_BigMap;
      mk_Block;
      mk_Case;
      mk_Const;
      mk_Contains;
      mk_Else;
      mk_End;
      mk_For;
      mk_From;
      mk_Function;
      mk_If;
      mk_In;
      mk_Is;
      mk_List;
      mk_Map;
      mk_Mod;
      mk_Nil;
      mk_Not;
      mk_Of;
      mk_Or;
      mk_Patch;
      mk_Record;
      mk_Recursive;
      mk_Remove;
      mk_Set;
      mk_Skip;
      mk_Step;
      mk_Then;
      mk_To;
      mk_Type;
      mk_Var;
      mk_While;
      mk_With;
      mk_Module
    ]

    let keywords =
     let add map (key, value) = SMap.add key value map in
      let apply map mk_kwd =
        add map (to_lexeme (mk_kwd Region.ghost), mk_kwd)
      in List.fold_left apply SMap.empty keywords

    (* SYMBOLS *)

    let mk_SEMI     region = SEMI     (wrap ";"   region)
    let mk_COMMA    region = COMMA    (wrap ","   region)
    let mk_LPAR     region = LPAR     (wrap "("   region)
    let mk_RPAR     region = RPAR     (wrap ")"   region)
    let mk_LBRACKET region = LBRACKET (wrap "["   region)
    let mk_RBRACKET region = RBRACKET (wrap "]"   region)
    let mk_LBRACE   region = LBRACE   (wrap "{"   region)
    let mk_RBRACE   region = RBRACE   (wrap "}"   region)
    let mk_EQ       region = EQ       (wrap "="   region)
    let mk_COLON    region = COLON    (wrap ":"   region)
    let mk_VBAR     region = VBAR     (wrap "|"   region)
    let mk_DOT      region = DOT      (wrap "."   region)
    let mk_WILD     region = WILD     (wrap "_"   region)
    let mk_PLUS     region = PLUS     (wrap "+"   region)
    let mk_MINUS    region = MINUS    (wrap "-"   region)
    let mk_TIMES    region = TIMES    (wrap "*"   region)
    let mk_SLASH    region = SLASH    (wrap "/"   region)
    let mk_LT       region = LT       (wrap "<"   region)
    let mk_LE       region = LE       (wrap "<="  region)
    let mk_GT       region = GT       (wrap ">"   region)
    let mk_GE       region = GE       (wrap ">="  region)

    (* Symbols specific to PascaLIGO *)

    let mk_CARET    region = CARET    (wrap "^"   region)
    let mk_ARROW    region = ARROW    (wrap "->"  region)
    let mk_NE       region = NE       (wrap "=/=" region)
    let mk_SHARP    region = SHARP    (wrap "#"   region)
    let mk_ASS      region = ASS      (wrap ":="  region)

    let symbols = [
      mk_SEMI;
      mk_COMMA;
      mk_LPAR;
      mk_RPAR;
      mk_LBRACKET;
      mk_RBRACKET;
      mk_LBRACE;
      mk_RBRACE;
      mk_EQ;
      mk_COLON;
      mk_VBAR;
      mk_DOT;
      mk_WILD;
      mk_PLUS;
      mk_MINUS;
      mk_TIMES;
      mk_SLASH;
      mk_LT;
      mk_LE;
      mk_GT;
      mk_GE;

      mk_CARET;
      mk_ARROW;
      mk_NE;
      mk_SHARP;
      mk_ASS
    ]

    let symbols =
      let add map (key, value) = SMap.add key value map in
      let apply map mk_kwd =
        add map (to_lexeme (mk_kwd Region.ghost), mk_kwd)
      in List.fold_left apply SMap.empty symbols


    (* GHOST TOKEN ARGUMENTS *)

    (* IMPORTANT: These values cannot be exported in Token.mli *)

    let ghost_String   = Wrap.ghost "\"a string\""
    let ghost_Verbatim = Wrap.ghost "{|verbatim|}"
    let ghost_Bytes    = Wrap.ghost ("0xAA", `Hex "AA")
    let ghost_Int      = Wrap.ghost ("1", Z.one)
    let ghost_Nat      = Wrap.ghost ("1n", Z.one)
    let ghost_Mutez    = Wrap.ghost ("1mutez", Int64.one)
    let ghost_Ident    = Wrap.ghost "id"
    let ghost_UIdent   = Wrap.ghost "C"
    let ghost_Lang     = Region.(wrap_ghost "Michelson")
    let ghost_Attr     = Region.(wrap_ghost (wrap_ghost ("attr", None)))

    let ghost_SEMI     = mk_SEMI     Region.ghost
    let ghost_COMMA    = mk_COMMA    Region.ghost
    let ghost_LPAR     = mk_LPAR     Region.ghost
    let ghost_RPAR     = mk_RPAR     Region.ghost
    let ghost_LBRACE   = mk_LBRACE   Region.ghost
    let ghost_RBRACE   = mk_RBRACE   Region.ghost
    let ghost_LBRACKET = mk_LBRACKET Region.ghost
    let ghost_RBRACKET = mk_RBRACKET Region.ghost
    let ghost_SHARP    = mk_SHARP    Region.ghost
    let ghost_VBAR     = mk_VBAR     Region.ghost
    let ghost_ARROW    = mk_ARROW    Region.ghost
    let ghost_ASS      = mk_ASS      Region.ghost
    let ghost_EQ       = mk_EQ       Region.ghost
    let ghost_COLON    = mk_COLON    Region.ghost
    let ghost_LT       = mk_LT       Region.ghost
    let ghost_LE       = mk_LE       Region.ghost
    let ghost_GT       = mk_GT       Region.ghost
    let ghost_GE       = mk_GE       Region.ghost
    let ghost_NE       = mk_NE       Region.ghost
    let ghost_PLUS     = mk_PLUS     Region.ghost
    let ghost_MINUS    = mk_MINUS    Region.ghost
    let ghost_SLASH    = mk_SLASH    Region.ghost
    let ghost_TIMES    = mk_TIMES    Region.ghost
    let ghost_DOT      = mk_DOT      Region.ghost
    let ghost_WILD     = mk_WILD     Region.ghost
    let ghost_CARET    = mk_CARET    Region.ghost

    let ghost_And       = mk_And       Region.ghost
    let ghost_Begin     = mk_Begin     Region.ghost
    let ghost_BigMap    = mk_BigMap    Region.ghost
    let ghost_Block     = mk_Block     Region.ghost
    let ghost_Case      = mk_Case      Region.ghost
    let ghost_Const     = mk_Const     Region.ghost
    let ghost_Contains  = mk_Contains  Region.ghost
    let ghost_Else      = mk_Else      Region.ghost
    let ghost_End       = mk_End       Region.ghost
    let ghost_For       = mk_For       Region.ghost
    let ghost_From      = mk_From      Region.ghost
    let ghost_Function  = mk_Function  Region.ghost
    let ghost_Recursive = mk_Recursive Region.ghost
    let ghost_If        = mk_If        Region.ghost
    let ghost_In        = mk_In        Region.ghost
    let ghost_Is        = mk_Is        Region.ghost
    let ghost_List      = mk_List      Region.ghost
    let ghost_Map       = mk_Map       Region.ghost
    let ghost_Mod       = mk_Mod       Region.ghost
    let ghost_Nil       = mk_Nil       Region.ghost
    let ghost_Not       = mk_Not       Region.ghost
    let ghost_Of        = mk_Of        Region.ghost
    let ghost_Or        = mk_Or        Region.ghost
    let ghost_Patch     = mk_Patch     Region.ghost
    let ghost_Record    = mk_Record    Region.ghost
    let ghost_Remove    = mk_Remove    Region.ghost
    let ghost_Set       = mk_Set       Region.ghost
    let ghost_Skip      = mk_Skip      Region.ghost
    let ghost_Step      = mk_Step      Region.ghost
    let ghost_Then      = mk_Then      Region.ghost
    let ghost_To        = mk_To        Region.ghost
    let ghost_Type      = mk_Type      Region.ghost
    let ghost_Var       = mk_Var       Region.ghost
    let ghost_While     = mk_While     Region.ghost
    let ghost_With      = mk_With      Region.ghost
    let ghost_Module    = mk_Module    Region.ghost

    let ghost_EOF       = Wrap.ghost ""


    (* FROM TOKEN STRINGS TO LEXEMES *)

    (* TODO: Remove. We don't need fresh variables for syntax checking.

`   let gen_sym prefix =
      let count = ref 0 in
      fun () -> incr count; prefix ^ string_of_int !count

    let id_sym   = gen_sym "id"
    and ctor_sym = gen_sym "C"
     *)

    let concrete = function
      (* Literals *)

      "Ident"    -> ghost_Ident#payload (*id_sym ()*)
    | "UIdent"   -> ghost_UIdent#payload (*ctor_sym ()*)
    | "Int"      -> fst ghost_Int#payload
    | "Nat"      -> fst ghost_Nat#payload
    | "Mutez"    -> fst ghost_Mutez#payload
    | "String"   -> ghost_String#payload
    | "Verbatim" -> ghost_Verbatim#payload
    | "Bytes"    -> fst ghost_Bytes#payload
    | "Attr"     -> Attr.to_lexeme Region.(ghost_Attr.value.value)
    | "Lang"     -> "[%" ^ ghost_Lang.Region.value

    (* Symbols *)

    | "SEMI"     -> to_lexeme ghost_SEMI
    | "COMMA"    -> to_lexeme ghost_COMMA
    | "LPAR"     -> to_lexeme ghost_LPAR
    | "RPAR"     -> to_lexeme ghost_RPAR
    | "LBRACE"   -> to_lexeme ghost_LBRACE
    | "RBRACE"   -> to_lexeme ghost_RBRACE
    | "LBRACKET" -> to_lexeme ghost_LBRACKET
    | "RBRACKET" -> to_lexeme ghost_RBRACKET
    | "SHARP"    -> to_lexeme ghost_SHARP
    | "VBAR"     -> to_lexeme ghost_VBAR
    | "ARROW"    -> to_lexeme ghost_ARROW
    | "ASS"      -> to_lexeme ghost_ASS
    | "EQ"       -> to_lexeme ghost_EQ
    | "COLON"    -> to_lexeme ghost_COLON
    | "LT"       -> to_lexeme ghost_LT
    | "LE"       -> to_lexeme ghost_LE
    | "GT"       -> to_lexeme ghost_GT
    | "GE"       -> to_lexeme ghost_GE
    | "NE"       -> to_lexeme ghost_NE
    | "PLUS"     -> to_lexeme ghost_PLUS
    | "MINUS"    -> to_lexeme ghost_MINUS
    | "SLASH"    -> to_lexeme ghost_SLASH
    | "TIMES"    -> to_lexeme ghost_TIMES
    | "DOT"      -> to_lexeme ghost_DOT
    | "WILD"     -> to_lexeme ghost_WILD
    | "CARET"    -> to_lexeme ghost_CARET

    (* Keywords *)

    | "And"       -> to_lexeme ghost_And
    | "Begin"     -> to_lexeme ghost_Begin
    | "BigMap"    -> to_lexeme ghost_BigMap
    | "Block"     -> to_lexeme ghost_Block
    | "Case"      -> to_lexeme ghost_Case
    | "Const"     -> to_lexeme ghost_Const
    | "Contains"  -> to_lexeme ghost_Contains
    | "Else"      -> to_lexeme ghost_Else
    | "End"       -> to_lexeme ghost_End
    | "For"       -> to_lexeme ghost_For
    | "From"      -> to_lexeme ghost_From
    | "Function"  -> to_lexeme ghost_Function
    | "Recursive" -> to_lexeme ghost_Recursive
    | "If"        -> to_lexeme ghost_If
    | "In"        -> to_lexeme ghost_In
    | "Is"        -> to_lexeme ghost_Is
    | "List"      -> to_lexeme ghost_List
    | "Map"       -> to_lexeme ghost_Map
    | "Mod"       -> to_lexeme ghost_Mod
    | "Nil"       -> to_lexeme ghost_Nil
    | "Not"       -> to_lexeme ghost_Not
    | "Of"        -> to_lexeme ghost_Of
    | "Or"        -> to_lexeme ghost_Or
    | "Patch"     -> to_lexeme ghost_Patch
    | "Record"    -> to_lexeme ghost_Record
    | "Remove"    -> to_lexeme ghost_Remove
    | "Set"       -> to_lexeme ghost_Set
    | "Skip"      -> to_lexeme ghost_Skip
    | "Step"      -> to_lexeme ghost_Step
    | "Then"      -> to_lexeme ghost_Then
    | "To"        -> to_lexeme ghost_To
    | "Type"      -> to_lexeme ghost_Type
    | "Var"       -> to_lexeme ghost_Var
    | "While"     -> to_lexeme ghost_While
    | "With"      -> to_lexeme ghost_With
    | "Module"    -> to_lexeme ghost_Module

    (* End-Of-File *)

    | "EOF" -> ghost_EOF#payload

    (* This case should not happen! *)

    | _  -> "\\Unknown" (* Backslash meant to trigger an error *)


    (* FROM TOKENS TO TOKEN STRINGS AND REGIONS *)

    let proj_token = function
      (* Preprocessing directives *)

      Directive d ->
        Directive.project d

      (* Literals *)

    | String t ->
        t#region, sprintf "String %S" t#payload
    | Verbatim t ->
        t#region, sprintf "Verbatim %S" t#payload
    | Bytes t ->
        let s, b = t#payload in
        t#region,
        sprintf "Bytes (%S, \"0x%s\")" s (Hex.show b)
    | Int t ->
        let s, n = t#payload in
        t#region, sprintf "Int (%S, %s)" s (Z.to_string n)
    | Nat t ->
        let s, n = t#payload in
        t#region, sprintf "Nat (%S, %s)" s (Z.to_string n)
    | Mutez t ->
        let s, n = t#payload in
        t#region, sprintf "Mutez (%S, %s)" s (Int64.to_string n)
    | Ident t ->
        t#region, sprintf "Ident %S" t#payload
    | UIdent t ->
        t#region, sprintf "UIdent %S" t#payload
    | Attr {region; value} ->
        region, sprintf "Attr %s" (Attr.to_string value)
    | Lang {value = {value = payload; _}; region; _} ->
        region, sprintf "Lang %S" payload

    (* Symbols *)

    | SEMI     t -> t#region, "SEMI"
    | COMMA    t -> t#region, "COMMA"
    | LPAR     t -> t#region, "LPAR"
    | RPAR     t -> t#region, "RPAR"
    | LBRACE   t -> t#region, "LBRACE"
    | RBRACE   t -> t#region, "RBRACE"
    | LBRACKET t -> t#region, "LBRACKET"
    | RBRACKET t -> t#region, "RBRACKET"
    | SHARP    t -> t#region, "SHARP"
    | VBAR     t -> t#region, "VBAR"
    | ARROW    t -> t#region, "ARROW"
    | ASS      t -> t#region, "ASS"
    | EQ       t -> t#region, "EQ"
    | COLON    t -> t#region, "COLON"
    | LT       t -> t#region, "LT"
    | LE       t -> t#region, "LE"
    | GT       t -> t#region, "GT"
    | GE       t -> t#region, "GE"
    | NE       t -> t#region, "NE"
    | PLUS     t -> t#region, "PLUS"
    | MINUS    t -> t#region, "MINUS"
    | SLASH    t -> t#region, "SLASH"
    | TIMES    t -> t#region, "TIMES"
    | DOT      t -> t#region, "DOT"
    | WILD     t -> t#region, "WILD"
    | CARET    t -> t#region, "CARET"

    (* Keywords *)

    | And       t -> t#region, "And"
    | Begin     t -> t#region, "Begin"
    | BigMap    t -> t#region, "BigMap"
    | Block     t -> t#region, "Block"
    | Case      t -> t#region, "Case"
    | Const     t -> t#region, "Const"
    | Contains  t -> t#region, "Contains"
    | Else      t -> t#region, "Else"
    | End       t -> t#region, "End"
    | For       t -> t#region, "For"
    | From      t -> t#region, "From"
    | Function  t -> t#region, "Function"
    | Recursive t -> t#region, "Recursive"
    | If        t -> t#region, "If"
    | In        t -> t#region, "In"
    | Is        t -> t#region, "Is"
    | List      t -> t#region, "List"
    | Map       t -> t#region, "Map"
    | Mod       t -> t#region, "Mod"
    | Nil       t -> t#region, "Nil"
    | Not       t -> t#region, "Not"
    | Of        t -> t#region, "Of"
    | Or        t -> t#region, "Or"
    | Patch     t -> t#region, "Patch"
    | Record    t -> t#region, "Record"
    | Remove    t -> t#region, "Remove"
    | Set       t -> t#region, "Set"
    | Skip      t -> t#region, "Skip"
    | Step      t -> t#region, "Step"
    | Then      t -> t#region, "Then"
    | To        t -> t#region, "To"
    | Type      t -> t#region, "Type"
    | Var       t -> t#region, "Var"
    | While     t -> t#region, "While"
    | With      t -> t#region, "With"
    | Module    t -> t#region, "Module"

    (* End-Of-File *)

    | EOF t -> t#region, "EOF"


    (* CONVERSIONS *)

    let to_string ~offsets mode token =
      let region, val_str = proj_token token in
      let reg_str = region#compact ~offsets mode
      in sprintf "%s: %s" reg_str val_str

    let to_region token = proj_token token |> fst


    (* SMART CONSTRUCTORS *)

    (* Keywords *)

    type kwd_err = Invalid_keyword

    let mk_kwd ident region =
      match SMap.find_opt ident keywords with
        Some mk_kwd -> Ok (mk_kwd region)
      |        None -> Error Invalid_keyword

    (* Directives *)

    let mk_directive dir = Directive dir

    (* Strings *)

    let mk_string lexeme region = String (wrap lexeme region)

    (* Verbatim strings *)

    let mk_verbatim lexeme region = Verbatim (wrap lexeme region)

    (* Bytes *)

    let mk_bytes lexeme bytes region =
      Bytes (wrap (lexeme, `Hex bytes) region)

    (* Integers *)

    let mk_int lexeme z region = Int (wrap (lexeme, z) region)

    (* Natural numbers *)

    type nat_err = Wrong_nat_syntax of string (* Not PascaLIGO *)

    let mk_nat nat z region = Ok (Nat (wrap (nat ^ "n", z) region))

    (* Mutez *)

    type mutez_err = Wrong_mutez_syntax of string (* Not PascaLIGO *)

    let mk_mutez nat ~suffix int64 region =
      Ok (Mutez (wrap (nat ^ suffix, int64) region))

    (* End-Of-File *)

    let mk_eof region = EOF (wrap "" region)

    (* Symbols *)

    type sym_err = Invalid_symbol of string

    let mk_sym lexeme region =
      match SMap.find_opt lexeme symbols with
        Some mk_sym -> Ok (mk_sym region)
      |        None -> Error (Invalid_symbol lexeme)

    (* Identifiers *)

    let mk_ident value region =
      match SMap.find_opt value keywords with
        Some mk_kwd -> mk_kwd region
      |        None -> Ident (wrap value region)

    (* Constructors/Modules *)

    let mk_uident value region = UIdent (wrap value region)

    (* Attributes *)

    let mk_attr ~key ?value region = Attr {region; value = key, value}

    (* Code injection *)

    type lang_err = Wrong_lang_syntax of string (* Not PascaLIGO *)

    let mk_lang lang region = Ok (Lang Region.{value=lang; region})

    (* PREDICATES *)

    let is_int    = function Int    _ -> true | _ -> false
    let is_string = function String _ -> true | _ -> false
    let is_bytes  = function Bytes  _ -> true | _ -> false
    let is_eof    = function EOF    _ -> true | _ -> false

    let hex_digits = ["A"; "B"; "C"; "D"; "E"; "F";
                      "a"; "b"; "c"; "d"; "e"; "f"]

    let is_hex = function
      UIdent t | Ident t -> List.mem t#payload hex_digits
    | _ -> false

    let is_sym = function
      SEMI _
    | COMMA _
    | LPAR _
    | RPAR _
    | LBRACE _
    | RBRACE _
    | LBRACKET _
    | RBRACKET _
    | SHARP _
    | VBAR _
    | ARROW _
    | ASS _
    | EQ _
    | COLON _
    | LT _
    | LE _
    | GT _
    | GE _
    | NE _
    | PLUS _
    | MINUS _
    | SLASH _
    | TIMES _
    | DOT _
    | WILD _
    | CARET _ -> true
    | _ -> false

    (* String delimiters *)

    let support_string_delimiter c = (c = '"')

    (* Verbatim strings *)

    let verbatim_delimiters = ("{|", "|}")
  end

include T

module type S = module type of T
