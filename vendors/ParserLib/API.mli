(* Making parsers from a variety of input using Menhir. *)

(* Vendor dependencies *)

module Region = Simple_utils.Region
module Utils  = Simple_utils.Utils

(* Generic signature of tokens *)

module type TOKEN =
  sig
    type token
    type t = token

    val to_region : token -> Region.t
  end

(* Generic signature of input lexers *)

module type LEXER =
  sig
    module Token : TOKEN
    type token = Token.t

    type message = string Region.reg

    val scan : Lexing.lexbuf -> (token, message) Stdlib.result

    val get_tokens : unit -> token list (* Scanned tokens *)
  end

(* The signature generated by Menhir with an additional type
   definition for [tree]. *)

module type PARSER =
  sig
    type token
    type tree

    (* The monolithic API. *)

    exception Error

    val main : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> tree

    (* The incremental API. *)

    module MenhirInterpreter : MenhirLib.IncrementalEngine.EVERYTHING
           with type token = token

    module Incremental :
      sig
        val main :
          Lexing.position -> tree MenhirInterpreter.checkpoint
      end

    (* The recovery API. *)

    module Recovery : Merlin_recovery.RECOVERY_GENERATED
           with module I := MenhirInterpreter
  end

(* Mappimg from error states in the LR automaton generated by Menhir
   to error messages (incremental API of Menhir) *)

module type PAR_ERR =
  sig
    val message : int -> string
  end

(* Debug setting *)

module type DEBUG_CONFIG =
  sig
    (* Enable debug printing in the recovery algorithm *)

    val error_recovery_tracing : bool

    (* Path to a log file or [None] that means to use stdout *)

    val tracing_output         : string option
  end

(* The functor integrating the parser with its errors *)

module Make (Lexer  : LEXER)
            (Parser : PARSER with type token = Lexer.token)
            (Debug  : DEBUG_CONFIG) :
  sig
    type token = Lexer.token

    type message = string Region.reg

    type error = {
      used_tokens : token list;
      message     : message
    }

    type 'src parser = 'src -> (Parser.tree, error) Stdlib.result

    (* Monolithic API of Menhir *)

    type file_path = string

    val mono_from_lexbuf  : Lexing.lexbuf parser
    val mono_from_channel : in_channel    parser
    val mono_from_string  : string        parser
    val mono_from_file    : file_path     parser

    (* Incremental API of Menhir *)

    val incr_from_lexbuf  : (module PAR_ERR) -> Lexing.lexbuf parser
    val incr_from_channel : (module PAR_ERR) -> in_channel    parser
    val incr_from_string  : (module PAR_ERR) -> string        parser
    val incr_from_file    : (module PAR_ERR) -> file_path     parser

    (* Incremental API with recovery *)

    (* The type ['src recovery_parser] denotes parsers with recovery
       on error. The results are one of the following:

         * [Ok (tree, [])] if the input of type ['src] contains a
           syntactically valid contract;

         * [Ok (repaired_tree, errors)] in case of a syntax error;

         * [Error errors] for non-syntactical errors, e.g. the input
           is not found or a lexer error occurred. *)

    type 'src recovery_parser =
      'src -> (Parser.tree * message list, message Utils.nseq) Stdlib.result

    val extract_recovery_results :
      (Parser.tree * message list, message Utils.nseq) Stdlib.result
      -> Parser.tree option * message list

    (* Parse with recovery on error from various sources *)

    val recov_from_lexbuf  : (module PAR_ERR) -> Lexing.lexbuf recovery_parser
    val recov_from_channel : (module PAR_ERR) -> in_channel    recovery_parser
    val recov_from_string  : (module PAR_ERR) -> string        recovery_parser
    val recov_from_file    : (module PAR_ERR) -> file_path     recovery_parser
  end
